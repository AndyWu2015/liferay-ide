### Eclipse Workspace Patch 1.0
#P com.liferay.ide.eclipse.server.tomcat.ui
Index: src/com/liferay/ide/eclipse/server/tomcat/ui/command/SetUserVMArgsCommand.java
===================================================================
--- src/com/liferay/ide/eclipse/server/tomcat/ui/command/SetUserVMArgsCommand.java	(revision 0)
+++ src/com/liferay/ide/eclipse/server/tomcat/ui/command/SetUserVMArgsCommand.java	(revision 0)
@@ -0,0 +1,55 @@
+/*******************************************************************************
+ * Copyright (c) 2010 SAS Institute, Inc. and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     Larry Isaacs - Initial API and implementation
+ *     Greg Amerson <gregory.amerson@liferay.com>
+ *******************************************************************************/
+
+package com.liferay.ide.eclipse.server.tomcat.ui.command;
+
+import com.liferay.ide.eclipse.server.tomcat.core.PortalTomcatServer;
+
+import org.eclipse.jst.server.tomcat.core.internal.command.ServerCommand;
+
+/**
+ * Command to change the user timezone
+ */
+@SuppressWarnings("restriction")
+public class SetUserVMArgsCommand extends ServerCommand {
+
+	protected String userVMArgs;
+	protected String oldUserVMArgs;
+
+	/**
+	 * Constructs command to set the deploy directory.
+	 * 
+	 * @param server
+	 *            a Tomcat server
+	 * @param deployDir
+	 *            deployment directory to set
+	 */
+	public SetUserVMArgsCommand(PortalTomcatServer server, String userVMArgs) {
+		super(server, "Set User VMArgs");
+		this.userVMArgs = userVMArgs;
+	}
+
+	/**
+	 * Execute setting the deploy directory
+	 */
+	public void execute() {
+		oldUserVMArgs = ((PortalTomcatServer) server).getUserVMArgs();
+		((PortalTomcatServer) server).setUserVMArgs(userVMArgs);
+	}
+
+	/**
+	 * Restore prior deploy directory
+	 */
+	public void undo() {
+		((PortalTomcatServer) server).setUserVMArgs(oldUserVMArgs);
+	}
+}
Index: src/com/liferay/ide/eclipse/server/tomcat/ui/editor/PortalServerLocationEditorSection.java
===================================================================
--- src/com/liferay/ide/eclipse/server/tomcat/ui/editor/PortalServerLocationEditorSection.java	(revision 52745)
+++ src/com/liferay/ide/eclipse/server/tomcat/ui/editor/PortalServerLocationEditorSection.java	(working copy)
@@ -1,698 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2010 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *    IBM Corporation - Initial API and implementation
- *    Greg Amerson <gregory.amerson@liferay.com>
- *******************************************************************************/
-package com.liferay.ide.eclipse.server.tomcat.ui.editor;
-
-import com.liferay.ide.eclipse.server.tomcat.core.IPortalTomcatConstants;
-import com.liferay.ide.eclipse.server.tomcat.core.PortalTomcatServer;
-import com.liferay.ide.eclipse.server.tomcat.ui.command.SetAutoDeployDirectoryCommand;
-import com.liferay.ide.eclipse.server.tomcat.ui.command.SetAutoDeployIntervalCommand;
-import com.liferay.ide.eclipse.server.ui.PortalServerUIPlugin;
-
-import java.beans.PropertyChangeEvent;
-import java.beans.PropertyChangeListener;
-
-import org.eclipse.core.resources.IWorkspaceRoot;
-import org.eclipse.core.resources.ResourcesPlugin;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Path;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.jst.server.tomcat.core.internal.ITomcatServer;
-import org.eclipse.jst.server.tomcat.ui.internal.ContextIds;
-import org.eclipse.jst.server.tomcat.ui.internal.Messages;
-import org.eclipse.osgi.util.NLS;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.ModifyEvent;
-import org.eclipse.swt.events.ModifyListener;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.DirectoryDialog;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Text;
-import org.eclipse.ui.IEditorInput;
-import org.eclipse.ui.IEditorSite;
-import org.eclipse.ui.PlatformUI;
-import org.eclipse.ui.forms.IFormColors;
-import org.eclipse.ui.forms.events.HyperlinkAdapter;
-import org.eclipse.ui.forms.events.HyperlinkEvent;
-import org.eclipse.ui.forms.widgets.ExpandableComposite;
-import org.eclipse.ui.forms.widgets.FormToolkit;
-import org.eclipse.ui.forms.widgets.Hyperlink;
-import org.eclipse.ui.forms.widgets.Section;
-import org.eclipse.ui.help.IWorkbenchHelpSystem;
-import org.eclipse.wst.server.core.IPublishListener;
-import org.eclipse.wst.server.core.IRuntime;
-import org.eclipse.wst.server.core.IServer;
-import org.eclipse.wst.server.core.util.PublishAdapter;
-import org.eclipse.wst.server.ui.editor.ServerEditorSection;
-
-/**
- * Portal Tomcat server location editor section
- */
-@SuppressWarnings("restriction")
-public class PortalServerLocationEditorSection extends ServerEditorSection {
-	protected Section section;
-	protected PortalTomcatServer tomcatServer;
-
-	protected Hyperlink setDefaultDeployDir;
-	
-	protected boolean defaultDeployDirIsSet;
-	
-//	protected Button serverDirMetadata;
-//	protected Button serverDirInstall;
-//	protected Button serverDirCustom;
-	
-//	protected Text serverDir;
-//	protected Button serverDirBrowse;
-//	protected Text deployDir;
-//	protected Button deployDirBrowse;
-	protected Text autoDeployDir;
-	protected Button autoDeployDirBrowse;
-	protected boolean updating;
-
-	protected PropertyChangeListener listener;
-	protected IPublishListener publishListener;
-	protected IPath workspacePath;
-	protected IPath defaultDeployPath;
-	
-	protected boolean allowRestrictedEditing;
-	protected IPath tempDirPath;
-	protected IPath installDirPath;
-	private Text autoDeployInterval;
-
-	// Avoid hardcoding this at some point
-	private final static String METADATADIR = ".metadata";
-	/**
-	 * ServerGeneralEditorPart constructor comment.
-	 */
-	public PortalServerLocationEditorSection() {
-		// do nothing
-	}
-
-	/**
-	 * Add listeners to detect undo changes and publishing of the server.
-	 */
-	protected void addChangeListeners() {
-		listener = new PropertyChangeListener() {
-			public void propertyChange(PropertyChangeEvent event) {
-				if (updating)
-					return;
-				updating = true;
-				if (ITomcatServer.PROPERTY_INSTANCE_DIR.equals(event.getPropertyName())
-						|| ITomcatServer.PROPERTY_TEST_ENVIRONMENT.equals(event.getPropertyName())) {
-					updateServerDirButtons();
-					updateServerDirFields();
-					validate();
-				}
-				else if (ITomcatServer.PROPERTY_DEPLOY_DIR.equals(event.getPropertyName())) {
-//					String s = (String) event.getNewValue();
-//					PortalServerLocationEditorSection.this.deployDir.setText(s);
-//					updateDefaultDeployLink();					
-//					validate();
-				} else if (IPortalTomcatConstants.PROPERTY_AUTO_DEPLOY_DIR.equals(event.getPropertyName())) {
-					String s = (String) event.getNewValue();
-					PortalServerLocationEditorSection.this.autoDeployDir.setText(s);
-					updateDefaultDeployLink();					
-					validate();
-				} else if (IPortalTomcatConstants.PROPERTY_AUTO_DEPLOY_INTERVAL.equals(event.getPropertyName())) {
-					String s = (String) event.getNewValue();
-					PortalServerLocationEditorSection.this.autoDeployInterval.setText(s);
-					updateDefaultDeployLink();					
-					validate();
-				}
-				updating = false;
-			}
-		};
-		server.addPropertyChangeListener(listener);
-		
-		publishListener = new PublishAdapter() {
-			public void publishFinished(IServer server2, IStatus status) {
-				boolean flag = false;
-				if (status.isOK() && server2.getModules().length == 0)
-					flag = true;
-				if (flag != allowRestrictedEditing) {
-					allowRestrictedEditing = flag;
-					// Update the state of the fields
-					PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
-						public void run() {
-//							boolean customServerDir = false;
-//							if (!PortalServerLocationEditorSection.this.serverDirCustom.isDisposed())
-//								customServerDir = PortalServerLocationEditorSection.this.serverDirCustom.getSelection();
-//							if (!PortalServerLocationEditorSection.this.serverDirMetadata.isDisposed())
-//								PortalServerLocationEditorSection.this.serverDirMetadata.setEnabled(allowRestrictedEditing);
-//							if (!PortalServerLocationEditorSection.this.serverDirInstall.isDisposed())
-//								PortalServerLocationEditorSection.this.serverDirInstall.setEnabled(allowRestrictedEditing);
-//							if (!PortalServerLocationEditorSection.this.serverDirCustom.isDisposed())
-//								PortalServerLocationEditorSection.this.serverDirCustom.setEnabled(allowRestrictedEditing);
-//							if (!PortalServerLocationEditorSection.this.serverDir.isDisposed())
-//								PortalServerLocationEditorSection.this.serverDir.setEnabled(allowRestrictedEditing && customServerDir);
-//							if (!PortalServerLocationEditorSection.this.serverDirBrowse.isDisposed())
-//								PortalServerLocationEditorSection.this.serverDirBrowse.setEnabled(allowRestrictedEditing && customServerDir);
-							if (!PortalServerLocationEditorSection.this.setDefaultDeployDir.isDisposed())
-								PortalServerLocationEditorSection.this.setDefaultDeployDir.setEnabled(allowRestrictedEditing);
-//							if (!PortalServerLocationEditorSection.this.deployDir.isDisposed())
-//								PortalServerLocationEditorSection.this.deployDir.setEnabled(allowRestrictedEditing);
-//							if (!PortalServerLocationEditorSection.this.deployDirBrowse.isDisposed())
-//								PortalServerLocationEditorSection.this.deployDirBrowse.setEnabled(allowRestrictedEditing);
-							if (!PortalServerLocationEditorSection.this.autoDeployDir.isDisposed())
-								PortalServerLocationEditorSection.this.autoDeployDir.setEnabled(allowRestrictedEditing);
-							if (!PortalServerLocationEditorSection.this.autoDeployDirBrowse.isDisposed())
-								PortalServerLocationEditorSection.this.autoDeployDirBrowse.setEnabled(allowRestrictedEditing);
-							if (!PortalServerLocationEditorSection.this.autoDeployInterval.isDisposed())
-								PortalServerLocationEditorSection.this.autoDeployInterval.setEnabled(allowRestrictedEditing);
-						}
-					});
-				}
-			}
-		};
-		server.getOriginal().addPublishListener(publishListener);
-	}
-	
-	/**
-	 * Creates the SWT controls for this workbench part.
-	 *
-	 * @param parent the parent control
-	 */
-	public void createSection(Composite parent) {
-		super.createSection(parent);
-		FormToolkit toolkit = getFormToolkit(parent.getDisplay());
-
-		section = toolkit.createSection(parent, ExpandableComposite.TWISTIE | ExpandableComposite.EXPANDED
-			| ExpandableComposite.TITLE_BAR | Section.DESCRIPTION | ExpandableComposite.FOCUS_TITLE);
-//		section.setText(Messages.serverEditorLocationsSection);
-//		section.setDescription(Messages.serverEditorLocationsDescription);
-		section.setText("Deployment");
-		section.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL));
-
-		Composite composite = toolkit.createComposite(section);
-		GridLayout layout = new GridLayout();
-		layout.numColumns = 3;
-		layout.marginHeight = 5;
-		layout.marginWidth = 10;
-		layout.verticalSpacing = 5;
-		layout.horizontalSpacing = 15;
-		composite.setLayout(layout);
-		composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL));
-		IWorkbenchHelpSystem whs = PlatformUI.getWorkbench().getHelpSystem();
-		whs.setHelp(composite, ContextIds.SERVER_EDITOR);
-		whs.setHelp(section, ContextIds.SERVER_EDITOR);
-		toolkit.paintBordersFor(composite);
-		section.setClient(composite);
-
-		/*
-		serverDirMetadata = toolkit.createButton(composite,
-				NLS.bind(Messages.serverEditorServerDirMetadata, Messages.serverEditorDoesNotModify), SWT.RADIO);
-		GridData data = new GridData(SWT.FILL, SWT.CENTER, true, false);
-		data.horizontalSpan = 3;
-		serverDirMetadata.setLayoutData(data);
-		serverDirMetadata.addSelectionListener(new SelectionAdapter() {
-			public void widgetSelected(SelectionEvent e) {
-				if (updating || !serverDirMetadata.getSelection())
-					return;
-				updating = true;
-				execute(new SetTestEnvironmentCommand(tomcatServer, true));
-				updateServerDirFields();
-				updating = false;
-				validate();
-			}
-		});
-
-		serverDirInstall = toolkit.createButton(composite,
-				NLS.bind(Messages.serverEditorServerDirInstall, Messages.serverEditorTakesControl), SWT.RADIO);
-		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
-		data.horizontalSpan = 3;
-		serverDirInstall.setLayoutData(data);
-		serverDirInstall.addSelectionListener(new SelectionAdapter() {
-			public void widgetSelected(SelectionEvent e) {
-				if (updating || !serverDirInstall.getSelection())
-					return;
-				updating = true;
-				execute(new SetTestEnvironmentCommand(tomcatServer, false));
-				updateServerDirFields();
-				updating = false;
-				validate();
-			}
-		});
-
-		serverDirCustom = toolkit.createButton(composite,
-				NLS.bind(Messages.serverEditorServerDirCustom, Messages.serverEditorDoesNotModify), SWT.RADIO);
-		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
-		data.horizontalSpan = 3;
-		serverDirCustom.setLayoutData(data);
-		serverDirCustom.addSelectionListener(new SelectionAdapter() {
-			public void widgetSelected(SelectionEvent e) {
-				if (updating || !serverDirCustom.getSelection())
-					return;
-				updating = true;
-				execute(new SetTestEnvironmentCommand(tomcatServer, true));
-				updateServerDirFields();
-				updating = false;
-				validate();
-			}
-		});
-		*/
-
-		// server directory
-//		Label label = createLabel(toolkit, composite, Messages.serverEditorServerDir);
-//		GridData data = new GridData(SWT.BEGINNING, SWT.CENTER, false, false);
-//		label.setLayoutData(data);
-
-//		serverDir = toolkit.createText(composite, null, SWT.SINGLE);
-//		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
-//		data.widthHint = 75;
-//		serverDir.setLayoutData(data);
-//		serverDir.addModifyListener(new ModifyListener() {
-//			public void modifyText(ModifyEvent e) {
-//				if (updating)
-//					return;
-//				updating = true;
-//				execute(new SetInstanceDirectoryCommand(tomcatServer, getServerDir()));
-//				updating = false;
-//				validate();
-//			}
-//		});
-
-//		serverDirBrowse = toolkit.createButton(composite, Messages.editorBrowse, SWT.PUSH);
-//		serverDirBrowse.addSelectionListener(new SelectionAdapter() {
-//			public void widgetSelected(SelectionEvent se) {
-//				DirectoryDialog dialog = new DirectoryDialog(serverDir.getShell());
-//				dialog.setMessage(Messages.serverEditorBrowseDeployMessage);
-//				dialog.setFilterPath(serverDir.getText());
-//				String selectedDirectory = dialog.open();
-//				if (selectedDirectory != null && !selectedDirectory.equals(serverDir.getText())) {
-//					updating = true;
-					// Make relative if relative to the workspace
-//					IPath path = new Path(selectedDirectory);
-//					if (workspacePath.isPrefixOf(path)) {
-//						int cnt = path.matchingFirstSegments(workspacePath);
-//						path = path.removeFirstSegments(cnt).setDevice(null);
-//						selectedDirectory = path.toOSString();
-//					}
-//					execute(new SetInstanceDirectoryCommand(tomcatServer, selectedDirectory));
-//					updateServerDirButtons();
-//					updateServerDirFields();
-//					updating = false;
-//					validate();
-//				}
-//			}
-//		});
-//		serverDirBrowse.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
-
-		
-
-		// deployment directory
-//		Label label = createLabel(toolkit, composite, Messages.serverEditorDeployDir);
-		GridData  data = new GridData(SWT.BEGINNING, SWT.CENTER, false, false);
-//		label.setLayoutData(data);
-
-//		deployDir = toolkit.createText(composite, null);
-//		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
-//		deployDir.setLayoutData(data);
-//		deployDir.addModifyListener(new ModifyListener() {
-//			public void modifyText(ModifyEvent e) {
-//				if (updating)
-//					return;
-//				updating = true;
-//				execute(new SetDeployDirectoryCommand(tomcatServer, deployDir.getText().trim()));
-//				updateDefaultDeployLink();
-//				updating = false;
-//				validate();
-//			}
-//		});
-
-//		deployDirBrowse = toolkit.createButton(composite, Messages.editorBrowse, SWT.PUSH);
-//		deployDirBrowse.addSelectionListener(new SelectionAdapter() {
-//			public void widgetSelected(SelectionEvent se) {
-//				DirectoryDialog dialog = new DirectoryDialog(deployDir.getShell());
-//				dialog.setMessage(Messages.serverEditorBrowseDeployMessage);
-//				dialog.setFilterPath(deployDir.getText());
-//				String selectedDirectory = dialog.open();
-//				if (selectedDirectory != null && !selectedDirectory.equals(deployDir.getText())) {
-//					updating = true;
-//					execute(new SetDeployDirectoryCommand(tomcatServer, selectedDirectory));
-//					deployDir.setText(selectedDirectory);
-//					updating = false;
-//					validate();
-//				}
-//			}
-//		});
-//		deployDirBrowse.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
-		
-		// auto deploy directory
-		Label label = createLabel(toolkit, composite, "Auto deploy path:");
-		data = new GridData(SWT.BEGINNING, SWT.CENTER, false, false);
-		label.setLayoutData(data);
-		
-		autoDeployDir = toolkit.createText(composite, null);
-		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
-		autoDeployDir.setLayoutData(data);
-		autoDeployDir.addModifyListener(new ModifyListener() {
-			public void modifyText(ModifyEvent e) {
-				if (updating)
-					return;
-				updating = true;
-				execute(new SetAutoDeployDirectoryCommand(tomcatServer, autoDeployDir.getText().trim()));
-				updateDefaultDeployLink();
-				updating = false;
-				validate();
-			}
-		});
-
-		autoDeployDirBrowse = toolkit.createButton(composite, Messages.editorBrowse, SWT.PUSH);
-		autoDeployDirBrowse.addSelectionListener(new SelectionAdapter() {
-			public void widgetSelected(SelectionEvent se) {
-				DirectoryDialog dialog = new DirectoryDialog(autoDeployDir.getShell());
-				dialog.setMessage(Messages.serverEditorBrowseDeployMessage);
-				dialog.setFilterPath(autoDeployDir.getText());
-				String selectedDirectory = dialog.open();
-				if (selectedDirectory != null && !selectedDirectory.equals(autoDeployDir.getText())) {
-					updating = true;
-					execute(new SetAutoDeployDirectoryCommand(tomcatServer, selectedDirectory));
-					autoDeployDir.setText(selectedDirectory);
-					updating = false;
-					validate();
-				}
-			}
-		});
-		autoDeployDirBrowse.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
-		
-		label = createLabel(toolkit, composite, "Auto deploy interval:");
-		data = new GridData(SWT.BEGINNING, SWT.CENTER, false, false);
-		label.setLayoutData(data);
-		
-		autoDeployInterval = toolkit.createText(composite, null);
-		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
-		autoDeployInterval.setLayoutData(data);
-		autoDeployInterval.addModifyListener(new ModifyListener() {
-			public void modifyText(ModifyEvent e) {
-				if (updating) {
-					return;
-				}
-				updating = true;
-				execute(new SetAutoDeployIntervalCommand(tomcatServer, autoDeployInterval.getText()));
-				updating = false;
-				validate();
-			}
-		});
-		
-		createLabel(toolkit, composite, "milliseconds");
-		data = new GridData(SWT.BEGINNING, SWT.CENTER, false, false);
-		label.setLayoutData(data);
-		
-		setDefaultDeployDir = toolkit.createHyperlink(composite, "Restore defaults.", SWT.WRAP);
-		setDefaultDeployDir.addHyperlinkListener(new HyperlinkAdapter() {
-			public void linkActivated(HyperlinkEvent e) {
-				updating = true;
-//				execute(new SetDeployDirectoryCommand(tomcatServer, PortalTomcatServer.DEFAULT_DEPLOYDIR));
-//				deployDir.setText(PortalTomcatServer.DEFAULT_DEPLOYDIR);
-				execute(new SetAutoDeployDirectoryCommand(tomcatServer, IPortalTomcatConstants.DEFAULT_AUTO_DEPLOYDIR));
-				autoDeployDir.setText(IPortalTomcatConstants.DEFAULT_AUTO_DEPLOYDIR);
-				execute(new SetAutoDeployIntervalCommand(tomcatServer, IPortalTomcatConstants.DEFAULT_AUTO_DEPLOY_INTERVAL));
-				autoDeployInterval.setText(IPortalTomcatConstants.DEFAULT_AUTO_DEPLOY_INTERVAL);
-				updateDefaultDeployLink();
-				updating = false;
-				validate();
-			}
-		});
-		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
-		data.horizontalSpan = 3;
-		setDefaultDeployDir.setLayoutData(data);
-
-		initialize();
-	}
-
-	protected Label createLabel(FormToolkit toolkit, Composite parent, String text) {
-		Label label = toolkit.createLabel(parent, text);
-		label.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
-		return label;
-	}
-
-	/**
-	 * @see ServerEditorSection#dispose()
-	 */
-	public void dispose() {
-		if (server != null) {
-			server.removePropertyChangeListener(listener);
-			if (server.getOriginal() != null)
-				server.getOriginal().removePublishListener(publishListener);
-		}
-	}
-
-	/**
-	 * @see ServerEditorSection#init(IEditorSite, IEditorInput)
-	 */
-	public void init(IEditorSite site, IEditorInput input) {
-		super.init(site, input);
-		
-		// Cache workspace and default deploy paths
-		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
-		workspacePath = root.getLocation();
-		defaultDeployPath = new Path(IPortalTomcatConstants.DEFAULT_DEPLOYDIR);
-
-		if (server != null) {
-			tomcatServer = (PortalTomcatServer) server.loadAdapter(PortalTomcatServer.class, null);
-			addChangeListeners();
-		}
-		initialize();
-	}
-
-	/**
-	 * Initialize the fields in this editor.
-	 */
-	protected void initialize() {
-		if (/*deployDir == null ||*/autoDeployInterval == null || tomcatServer == null)
-			return;
-		updating = true;
-
-		IRuntime runtime = server.getRuntime();
-		// If not Tomcat 3.2, update description to mention catalina.base
-		if (runtime != null && runtime.getRuntimeType().getId().indexOf("32") < 0)
-//			section.setDescription(Messages.serverEditorLocationsDescription2);
-			section.setDescription("Configure Liferay portal deployment options.");
-		if (runtime != null)
-			installDirPath = runtime.getLocation();
-
-		// determine if editing of locations is allowed
-		allowRestrictedEditing = false;
-		IPath basePath = tomcatServer.getRuntimeBaseDirectory();
-		if (!readOnly) {
-			// If server has not been published, or server is published with no modules, allow editing
-			// TODO Find better way to determine if server hasn't been published
-			if ((basePath != null && !basePath.append("conf").toFile().exists())
-					|| (server.getOriginal().getServerPublishState() == IServer.PUBLISH_STATE_NONE
-							&& server.getOriginal().getModules().length == 0)) {
-				allowRestrictedEditing = true;
-			}
-		}
-		
-		// Update server related fields
-		updateServerDirButtons();
-//		updateServerDirFields();
-
-//		serverDirMetadata.setEnabled(allowRestrictedEditing);
-//		serverDirInstall.setEnabled(allowRestrictedEditing);
-//		serverDirCustom.setEnabled(allowRestrictedEditing);
-
-		// Update deployment related fields
-		updateDefaultDeployLink();
-		
-//		deployDir.setText(tomcatServer.getDeployDirectory());
-		autoDeployDir.setText(tomcatServer.getAutoDeployDirectory());
-		autoDeployInterval.setText(tomcatServer.getAutoDeployInterval());
-
-		setDefaultDeployDir.setEnabled(allowRestrictedEditing);
-//		deployDir.setEnabled(allowRestrictedEditing);
-//		deployDirBrowse.setEnabled(allowRestrictedEditing);
-		autoDeployDir.setEnabled(allowRestrictedEditing);
-		autoDeployDirBrowse.setEnabled(allowRestrictedEditing);
-		autoDeployInterval.setEnabled(allowRestrictedEditing);
-
-		updating = false;
-		validate();
-	}
-	
-	/*
-	protected String getServerDir() {
-		String dir = null;
-		if (serverDir != null) {
-			dir = serverDir.getText().trim();
-			IPath path = new Path(dir);
-			// Adjust if the temp dir is known and has been entered
-			if (tempDirPath != null && tempDirPath.equals(path))
-				dir = null;
-			// If under the workspace, make relative
-			else if (workspacePath.isPrefixOf(path)) {
-				int cnt = path.matchingFirstSegments(workspacePath);
-				path = path.removeFirstSegments(cnt).setDevice(null);
-				dir = path.toOSString();
-			}
-		}
-		return dir;
-	}
-	*/
-	
-	protected void updateServerDirButtons() {
-		if (tomcatServer.getInstanceDirectory() == null) {
-//			IPath path = tomcatServer.getRuntimeBaseDirectory();
-//			if (path != null && path.equals(installDirPath)) {
-//				serverDirInstall.setSelection(true);
-//				serverDirMetadata.setSelection(false);
-//				serverDirCustom.setSelection(false);
-//			} else {
-//				serverDirMetadata.setSelection(true);
-//				serverDirInstall.setSelection(false);
-//				serverDirCustom.setSelection(false);
-//			}
-		} else {
-//			serverDirCustom.setSelection(true);
-//			serverDirMetadata.setSelection(false);
-//			serverDirInstall.setSelection(false);
-		}
-	}
-	
-	protected void updateServerDirFields() {
-//		updateServerDir();
-//		boolean customServerDir = true;//serverDirCustom.getSelection();
-//		serverDir.setEnabled(allowRestrictedEditing && customServerDir);
-//		serverDirBrowse.setEnabled(allowRestrictedEditing && customServerDir);
-	}
-	
-	/*
-	protected void updateServerDir() {
-		IPath path = tomcatServer.getRuntimeBaseDirectory();
-		if (path == null)
-			serverDir.setText("");
-		else if (workspacePath.isPrefixOf(path)) {
-			int cnt = path.matchingFirstSegments(workspacePath);
-			path = path.removeFirstSegments(cnt).setDevice(null);
-			serverDir.setText(path.toOSString());
-			// cache the relative temp dir path if that is what we have
-			if (tempDirPath == null) {
-				if (tomcatServer.isTestEnvironment() && tomcatServer.getInstanceDirectory() == null)
-					tempDirPath = path;
-			}
-		} else
-			serverDir.setText(path.toOSString());
-	}
-	*/
-	
-	protected void updateDefaultDeployLink() {
-//		boolean newState = defaultDeployPath.equals(new Path(tomcatServer.getDeployDirectory()));
-//		if (newState != defaultDeployDirIsSet) {
-//			setDefaultDeployDir.setText(
-//					newState ? Messages.serverEditorSetDefaultDeployDirLink2
-//							: Messages.serverEditorSetDefaultDeployDirLink);
-//			defaultDeployDirIsSet = newState;
-//		}
-	}
-	
-	/**
-	 * @see ServerEditorSection#getSaveStatus()
-	 */
-	public IStatus[] getSaveStatus() {
-		if (tomcatServer != null) {
-			// Check the instance directory
-			String dir = tomcatServer.getInstanceDirectory();
-			if (dir != null) {
-				IPath path = new Path(dir);
-				// Must not be the same as the workspace location
-				if (dir.length() == 0 || workspacePath.equals(path)) {
-					return new IStatus [] {
-							new Status(IStatus.ERROR, PortalServerUIPlugin.PLUGIN_ID, Messages.errorServerDirIsRoot)};
-				}
-				// User specified value may not be under the ".metadata" folder of the workspace 
-				else if (workspacePath.isPrefixOf(path)
-						|| (!path.isAbsolute() && METADATADIR.equals(path.segment(0)))) {
-					int cnt = path.matchingFirstSegments(workspacePath);
-					if (METADATADIR.equals(path.segment(cnt))) {
-						return new IStatus [] {
-								new Status(IStatus.ERROR, PortalServerUIPlugin.PLUGIN_ID, NLS.bind(Messages.errorServerDirUnderRoot, METADATADIR))};
-					}
-				}
-				else if (path.equals(installDirPath))
-					return new IStatus [] {
-						new Status(IStatus.ERROR, PortalServerUIPlugin.PLUGIN_ID,
-								NLS.bind(Messages.errorServerDirCustomNotInstall,
-										NLS.bind(Messages.serverEditorServerDirInstall, "").trim()))};
-			}
-			else {
-				IPath path = tomcatServer.getRuntimeBaseDirectory();
-				// If non-custom instance dir is not the install and metadata isn't the selection, return error
-				if (!path.equals(installDirPath) /* && !serverDirMetadata.getSelection()*/) {
-					return new IStatus [] {
-							new Status(IStatus.ERROR, PortalServerUIPlugin.PLUGIN_ID, "Changing runtime base directories not supported.")};
-				}
-			}
-
-			// Check the deployment directory
-			dir = tomcatServer.getDeployDirectory();
-			// Deploy directory must be set
-			if (dir == null || dir.length() == 0) {
-				return new IStatus [] {
-						new Status(IStatus.ERROR, PortalServerUIPlugin.PLUGIN_ID, Messages.errorDeployDirNotSpecified)};
-			}
-		}
-		// use default implementation to return success
-		return super.getSaveStatus();
-	}
-	
-	protected void validate() {
-		if (tomcatServer != null) {
-			// Validate instance directory
-			String dir = tomcatServer.getInstanceDirectory();
-			if (dir != null) {
-				IPath path = new Path(dir);
-				// Must not be the same as the workspace location
-				if (dir.length() == 0 || workspacePath.equals(path)) {
-					setErrorMessage(Messages.errorServerDirIsRoot);
-					return;
-				}
-				// User specified value may not be under the ".metadata" folder of the workspace 
-				else if (workspacePath.isPrefixOf(path)
-						|| (!path.isAbsolute() && METADATADIR.equals(path.segment(0)))) {
-					int cnt = path.matchingFirstSegments(workspacePath);
-					if (METADATADIR.equals(path.segment(cnt))) {
-						setErrorMessage(NLS.bind(Messages.errorServerDirUnderRoot, METADATADIR));
-						return;
-					}
-				}
-				else if (path.equals(installDirPath)) {
-					setErrorMessage(NLS.bind(Messages.errorServerDirCustomNotInstall,
-							NLS.bind(Messages.serverEditorServerDirInstall, "").trim()));
-					return;
-				}
-			}
-			else {
-				IPath path = tomcatServer.getRuntimeBaseDirectory();
-				// If non-custom instance dir is not the install and metadata isn't the selection, return error
-				if (path != null && !path.equals(installDirPath) /*&& !serverDirMetadata.getSelection()*/) {
-					setErrorMessage(NLS.bind(Messages.errorServerDirCustomNotMetadata, 
-							NLS.bind(Messages.serverEditorServerDirMetadata, "").trim()));
-				}
-			}
-
-			// Check the deployment directory
-			dir = tomcatServer.getDeployDirectory();
-			// Deploy directory must be set
-			if (dir == null || dir.length() == 0) {
-				setErrorMessage(Messages.errorDeployDirNotSpecified);
-				return;
-			}
-		}
-		// All is okay, clear any previous error
-		setErrorMessage(null);
-	}
-}
\ No newline at end of file
Index: src/com/liferay/ide/eclipse/server/tomcat/ui/editor/PortalServerLocationEditorSection.java
===================================================================
--- src/com/liferay/ide/eclipse/server/tomcat/ui/editor/PortalServerLocationEditorSection.java	(revision 0)
+++ src/com/liferay/ide/eclipse/server/tomcat/ui/editor/PortalServerLocationEditorSection.java	(revision 52745)
@@ -0,0 +1,734 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2010 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    IBM Corporation - Initial API and implementation
+ *    Greg Amerson <gregory.amerson@liferay.com>
+ *******************************************************************************/
+package com.liferay.ide.eclipse.server.tomcat.ui.editor;
+
+import com.liferay.ide.eclipse.server.tomcat.core.IPortalTomcatConstants;
+import com.liferay.ide.eclipse.server.tomcat.core.PortalTomcatServer;
+import com.liferay.ide.eclipse.server.tomcat.ui.command.SetAutoDeployDirectoryCommand;
+import com.liferay.ide.eclipse.server.tomcat.ui.command.SetAutoDeployIntervalCommand;
+import com.liferay.ide.eclipse.server.tomcat.ui.command.SetUserVMArgsCommand;
+import com.liferay.ide.eclipse.server.ui.PortalServerUIPlugin;
+
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
+
+import org.eclipse.core.resources.IWorkspaceRoot;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.jst.server.tomcat.core.internal.ITomcatServer;
+import org.eclipse.jst.server.tomcat.ui.internal.ContextIds;
+import org.eclipse.jst.server.tomcat.ui.internal.Messages;
+import org.eclipse.osgi.util.NLS;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.ModifyEvent;
+import org.eclipse.swt.events.ModifyListener;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.DirectoryDialog;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Text;
+import org.eclipse.ui.IEditorInput;
+import org.eclipse.ui.IEditorSite;
+import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.forms.IFormColors;
+import org.eclipse.ui.forms.events.HyperlinkAdapter;
+import org.eclipse.ui.forms.events.HyperlinkEvent;
+import org.eclipse.ui.forms.widgets.ExpandableComposite;
+import org.eclipse.ui.forms.widgets.FormToolkit;
+import org.eclipse.ui.forms.widgets.Hyperlink;
+import org.eclipse.ui.forms.widgets.Section;
+import org.eclipse.ui.help.IWorkbenchHelpSystem;
+import org.eclipse.wst.server.core.IPublishListener;
+import org.eclipse.wst.server.core.IRuntime;
+import org.eclipse.wst.server.core.IServer;
+import org.eclipse.wst.server.core.util.PublishAdapter;
+import org.eclipse.wst.server.ui.editor.ServerEditorSection;
+
+/**
+ * Portal Tomcat server location editor section
+ */
+@SuppressWarnings("restriction")
+public class PortalServerLocationEditorSection extends ServerEditorSection {
+	protected Section section;
+	protected PortalTomcatServer tomcatServer;
+
+	protected Hyperlink restoreDefaults;
+	
+	protected boolean defaultDeployDirIsSet;
+	
+//	protected Button serverDirMetadata;
+//	protected Button serverDirInstall;
+//	protected Button serverDirCustom;
+	
+//	protected Text serverDir;
+//	protected Button serverDirBrowse;
+//	protected Text deployDir;
+//	protected Button deployDirBrowse;
+	protected Text autoDeployDir;
+	protected Button autoDeployDirBrowse;
+	protected boolean updating;
+
+	protected PropertyChangeListener listener;
+	protected IPublishListener publishListener;
+	protected IPath workspacePath;
+	protected IPath defaultDeployPath;
+	
+	protected boolean allowRestrictedEditing;
+	protected IPath tempDirPath;
+	protected IPath installDirPath;
+	protected Text autoDeployInterval;
+	protected Text userVMArgs;
+
+	// Avoid hardcoding this at some point
+	private final static String METADATADIR = ".metadata";
+	/**
+	 * ServerGeneralEditorPart constructor comment.
+	 */
+	public PortalServerLocationEditorSection() {
+		// do nothing
+	}
+
+	/**
+	 * Add listeners to detect undo changes and publishing of the server.
+	 */
+	protected void addChangeListeners() {
+		listener = new PropertyChangeListener() {
+			public void propertyChange(PropertyChangeEvent event) {
+				if (updating)
+					return;
+				updating = true;
+				if (ITomcatServer.PROPERTY_INSTANCE_DIR.equals(event.getPropertyName())
+						|| ITomcatServer.PROPERTY_TEST_ENVIRONMENT.equals(event.getPropertyName())) {
+					updateServerDirButtons();
+					updateServerDirFields();
+					validate();
+				}
+				else if (ITomcatServer.PROPERTY_DEPLOY_DIR.equals(event.getPropertyName())) {
+//					String s = (String) event.getNewValue();
+//					PortalServerLocationEditorSection.this.deployDir.setText(s);
+//					updateDefaultDeployLink();					
+//					validate();
+				} else if (IPortalTomcatConstants.PROPERTY_AUTO_DEPLOY_DIR.equals(event.getPropertyName())) {
+					String s = (String) event.getNewValue();
+					PortalServerLocationEditorSection.this.autoDeployDir.setText(s);
+					updateRestoreDefaultsLink();
+					validate();
+				} else if (IPortalTomcatConstants.PROPERTY_AUTO_DEPLOY_INTERVAL.equals(event.getPropertyName())) {
+					String s = (String) event.getNewValue();
+					PortalServerLocationEditorSection.this.autoDeployInterval.setText(s);
+					updateRestoreDefaultsLink();
+					validate();
+				}
+				else if (IPortalTomcatConstants.PROPERTY_USER_VMARGS.equals(event.getPropertyName())) {
+					String s = (String) event.getNewValue();
+					PortalServerLocationEditorSection.this.userVMArgs.setText(s);
+					updateRestoreDefaultsLink();
+					validate();
+				}
+				updating = false;
+			}
+		};
+		server.addPropertyChangeListener(listener);
+		
+		publishListener = new PublishAdapter() {
+			public void publishFinished(IServer server2, IStatus status) {
+				boolean flag = false;
+				if (status.isOK() && server2.getModules().length == 0)
+					flag = true;
+				if (flag != allowRestrictedEditing) {
+					allowRestrictedEditing = flag;
+					// Update the state of the fields
+					PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
+						public void run() {
+//							boolean customServerDir = false;
+//							if (!PortalServerLocationEditorSection.this.serverDirCustom.isDisposed())
+//								customServerDir = PortalServerLocationEditorSection.this.serverDirCustom.getSelection();
+//							if (!PortalServerLocationEditorSection.this.serverDirMetadata.isDisposed())
+//								PortalServerLocationEditorSection.this.serverDirMetadata.setEnabled(allowRestrictedEditing);
+//							if (!PortalServerLocationEditorSection.this.serverDirInstall.isDisposed())
+//								PortalServerLocationEditorSection.this.serverDirInstall.setEnabled(allowRestrictedEditing);
+//							if (!PortalServerLocationEditorSection.this.serverDirCustom.isDisposed())
+//								PortalServerLocationEditorSection.this.serverDirCustom.setEnabled(allowRestrictedEditing);
+//							if (!PortalServerLocationEditorSection.this.serverDir.isDisposed())
+//								PortalServerLocationEditorSection.this.serverDir.setEnabled(allowRestrictedEditing && customServerDir);
+//							if (!PortalServerLocationEditorSection.this.serverDirBrowse.isDisposed())
+//								PortalServerLocationEditorSection.this.serverDirBrowse.setEnabled(allowRestrictedEditing && customServerDir);
+							if (!PortalServerLocationEditorSection.this.restoreDefaults.isDisposed())
+								PortalServerLocationEditorSection.this.restoreDefaults.setEnabled(allowRestrictedEditing);
+//							if (!PortalServerLocationEditorSection.this.deployDir.isDisposed())
+//								PortalServerLocationEditorSection.this.deployDir.setEnabled(allowRestrictedEditing);
+//							if (!PortalServerLocationEditorSection.this.deployDirBrowse.isDisposed())
+//								PortalServerLocationEditorSection.this.deployDirBrowse.setEnabled(allowRestrictedEditing);
+							if (!PortalServerLocationEditorSection.this.autoDeployDir.isDisposed())
+								PortalServerLocationEditorSection.this.autoDeployDir.setEnabled(allowRestrictedEditing);
+							if (!PortalServerLocationEditorSection.this.autoDeployDirBrowse.isDisposed())
+								PortalServerLocationEditorSection.this.autoDeployDirBrowse.setEnabled(allowRestrictedEditing);
+							if (!PortalServerLocationEditorSection.this.autoDeployInterval.isDisposed())
+								PortalServerLocationEditorSection.this.autoDeployInterval.setEnabled(allowRestrictedEditing);
+							if (!PortalServerLocationEditorSection.this.userVMArgs.isDisposed())
+								PortalServerLocationEditorSection.this.userVMArgs.setEnabled(allowRestrictedEditing);
+						}
+					});
+				}
+			}
+		};
+		server.getOriginal().addPublishListener(publishListener);
+	}
+	
+	/**
+	 * Creates the SWT controls for this workbench part.
+	 *
+	 * @param parent the parent control
+	 */
+	public void createSection(Composite parent) {
+		super.createSection(parent);
+		FormToolkit toolkit = getFormToolkit(parent.getDisplay());
+
+		section = toolkit.createSection(parent, ExpandableComposite.TWISTIE | ExpandableComposite.EXPANDED
+			| ExpandableComposite.TITLE_BAR | Section.DESCRIPTION | ExpandableComposite.FOCUS_TITLE);
+//		section.setText(Messages.serverEditorLocationsSection);
+//		section.setDescription(Messages.serverEditorLocationsDescription);
+		section.setText("Liferay Options");
+		section.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL));
+
+		Composite composite = toolkit.createComposite(section);
+		GridLayout layout = new GridLayout();
+		layout.numColumns = 3;
+		layout.marginHeight = 5;
+		layout.marginWidth = 10;
+		layout.verticalSpacing = 5;
+		layout.horizontalSpacing = 15;
+		composite.setLayout(layout);
+		composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL));
+		IWorkbenchHelpSystem whs = PlatformUI.getWorkbench().getHelpSystem();
+		whs.setHelp(composite, ContextIds.SERVER_EDITOR);
+		whs.setHelp(section, ContextIds.SERVER_EDITOR);
+		toolkit.paintBordersFor(composite);
+		section.setClient(composite);
+
+		/*
+		serverDirMetadata = toolkit.createButton(composite,
+				NLS.bind(Messages.serverEditorServerDirMetadata, Messages.serverEditorDoesNotModify), SWT.RADIO);
+		GridData data = new GridData(SWT.FILL, SWT.CENTER, true, false);
+		data.horizontalSpan = 3;
+		serverDirMetadata.setLayoutData(data);
+		serverDirMetadata.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				if (updating || !serverDirMetadata.getSelection())
+					return;
+				updating = true;
+				execute(new SetTestEnvironmentCommand(tomcatServer, true));
+				updateServerDirFields();
+				updating = false;
+				validate();
+			}
+		});
+
+		serverDirInstall = toolkit.createButton(composite,
+				NLS.bind(Messages.serverEditorServerDirInstall, Messages.serverEditorTakesControl), SWT.RADIO);
+		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
+		data.horizontalSpan = 3;
+		serverDirInstall.setLayoutData(data);
+		serverDirInstall.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				if (updating || !serverDirInstall.getSelection())
+					return;
+				updating = true;
+				execute(new SetTestEnvironmentCommand(tomcatServer, false));
+				updateServerDirFields();
+				updating = false;
+				validate();
+			}
+		});
+
+		serverDirCustom = toolkit.createButton(composite,
+				NLS.bind(Messages.serverEditorServerDirCustom, Messages.serverEditorDoesNotModify), SWT.RADIO);
+		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
+		data.horizontalSpan = 3;
+		serverDirCustom.setLayoutData(data);
+		serverDirCustom.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				if (updating || !serverDirCustom.getSelection())
+					return;
+				updating = true;
+				execute(new SetTestEnvironmentCommand(tomcatServer, true));
+				updateServerDirFields();
+				updating = false;
+				validate();
+			}
+		});
+		*/
+
+		// server directory
+//		Label label = createLabel(toolkit, composite, Messages.serverEditorServerDir);
+//		GridData data = new GridData(SWT.BEGINNING, SWT.CENTER, false, false);
+//		label.setLayoutData(data);
+
+//		serverDir = toolkit.createText(composite, null, SWT.SINGLE);
+//		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
+//		data.widthHint = 75;
+//		serverDir.setLayoutData(data);
+//		serverDir.addModifyListener(new ModifyListener() {
+//			public void modifyText(ModifyEvent e) {
+//				if (updating)
+//					return;
+//				updating = true;
+//				execute(new SetInstanceDirectoryCommand(tomcatServer, getServerDir()));
+//				updating = false;
+//				validate();
+//			}
+//		});
+
+//		serverDirBrowse = toolkit.createButton(composite, Messages.editorBrowse, SWT.PUSH);
+//		serverDirBrowse.addSelectionListener(new SelectionAdapter() {
+//			public void widgetSelected(SelectionEvent se) {
+//				DirectoryDialog dialog = new DirectoryDialog(serverDir.getShell());
+//				dialog.setMessage(Messages.serverEditorBrowseDeployMessage);
+//				dialog.setFilterPath(serverDir.getText());
+//				String selectedDirectory = dialog.open();
+//				if (selectedDirectory != null && !selectedDirectory.equals(serverDir.getText())) {
+//					updating = true;
+					// Make relative if relative to the workspace
+//					IPath path = new Path(selectedDirectory);
+//					if (workspacePath.isPrefixOf(path)) {
+//						int cnt = path.matchingFirstSegments(workspacePath);
+//						path = path.removeFirstSegments(cnt).setDevice(null);
+//						selectedDirectory = path.toOSString();
+//					}
+//					execute(new SetInstanceDirectoryCommand(tomcatServer, selectedDirectory));
+//					updateServerDirButtons();
+//					updateServerDirFields();
+//					updating = false;
+//					validate();
+//				}
+//			}
+//		});
+//		serverDirBrowse.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
+
+		
+
+		// deployment directory
+//		Label label = createLabel(toolkit, composite, Messages.serverEditorDeployDir);
+		GridData  data = new GridData(SWT.BEGINNING, SWT.CENTER, false, false);
+//		label.setLayoutData(data);
+
+//		deployDir = toolkit.createText(composite, null);
+//		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
+//		deployDir.setLayoutData(data);
+//		deployDir.addModifyListener(new ModifyListener() {
+//			public void modifyText(ModifyEvent e) {
+//				if (updating)
+//					return;
+//				updating = true;
+//				execute(new SetDeployDirectoryCommand(tomcatServer, deployDir.getText().trim()));
+//				updateDefaultDeployLink();
+//				updating = false;
+//				validate();
+//			}
+//		});
+
+//		deployDirBrowse = toolkit.createButton(composite, Messages.editorBrowse, SWT.PUSH);
+//		deployDirBrowse.addSelectionListener(new SelectionAdapter() {
+//			public void widgetSelected(SelectionEvent se) {
+//				DirectoryDialog dialog = new DirectoryDialog(deployDir.getShell());
+//				dialog.setMessage(Messages.serverEditorBrowseDeployMessage);
+//				dialog.setFilterPath(deployDir.getText());
+//				String selectedDirectory = dialog.open();
+//				if (selectedDirectory != null && !selectedDirectory.equals(deployDir.getText())) {
+//					updating = true;
+//					execute(new SetDeployDirectoryCommand(tomcatServer, selectedDirectory));
+//					deployDir.setText(selectedDirectory);
+//					updating = false;
+//					validate();
+//				}
+//			}
+//		});
+//		deployDirBrowse.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
+		
+		// auto deploy directory
+		Label label = createLabel(toolkit, composite, "Auto deploy path:");
+		data = new GridData(SWT.BEGINNING, SWT.CENTER, false, false);
+		label.setLayoutData(data);
+		
+		autoDeployDir = toolkit.createText(composite, null);
+		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
+		autoDeployDir.setLayoutData(data);
+		autoDeployDir.addModifyListener(new ModifyListener() {
+			public void modifyText(ModifyEvent e) {
+				if (updating)
+					return;
+				updating = true;
+				execute(new SetAutoDeployDirectoryCommand(tomcatServer, autoDeployDir.getText().trim()));
+				updateRestoreDefaultsLink();
+				updating = false;
+				validate();
+			}
+		});
+
+		autoDeployDirBrowse = toolkit.createButton(composite, Messages.editorBrowse, SWT.PUSH);
+		autoDeployDirBrowse.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent se) {
+				DirectoryDialog dialog = new DirectoryDialog(autoDeployDir.getShell());
+				dialog.setMessage(Messages.serverEditorBrowseDeployMessage);
+				dialog.setFilterPath(autoDeployDir.getText());
+				String selectedDirectory = dialog.open();
+				if (selectedDirectory != null && !selectedDirectory.equals(autoDeployDir.getText())) {
+					updating = true;
+					execute(new SetAutoDeployDirectoryCommand(tomcatServer, selectedDirectory));
+					autoDeployDir.setText(selectedDirectory);
+					updating = false;
+					validate();
+				}
+			}
+		});
+		autoDeployDirBrowse.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
+		
+		label = createLabel(toolkit, composite, "Auto deploy interval:");
+		data = new GridData(SWT.BEGINNING, SWT.CENTER, false, false);
+		label.setLayoutData(data);
+		
+		autoDeployInterval = toolkit.createText(composite, null);
+		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
+		autoDeployInterval.setLayoutData(data);
+		autoDeployInterval.addModifyListener(new ModifyListener() {
+			public void modifyText(ModifyEvent e) {
+				if (updating) {
+					return;
+				}
+				updating = true;
+				execute(new SetAutoDeployIntervalCommand(tomcatServer, autoDeployInterval.getText()));
+				updating = false;
+				validate();
+			}
+		});
+		
+		createLabel(toolkit, composite, "milliseconds");
+		data = new GridData(SWT.BEGINNING, SWT.CENTER, false, false);
+		label.setLayoutData(data);
+		
+		label = createLabel(toolkit, composite, "User VM Args:\n(One per line)");
+		data = new GridData(SWT.BEGINNING, SWT.CENTER, false, false);
+		label.setLayoutData(data);
+
+		userVMArgs = toolkit.createText(composite, null, SWT.WRAP);
+		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
+		data.heightHint = 65;
+		data.widthHint = 60;
+		userVMArgs.setLayoutData(data);
+		userVMArgs.addModifyListener(new ModifyListener() {
+
+			public void modifyText(ModifyEvent e) {
+				if (updating) {
+					return;
+				}
+				updating = true;
+				execute(new SetUserVMArgsCommand(tomcatServer, userVMArgs.getText()));
+				updating = false;
+				validate();
+			}
+		});
+
+		restoreDefaults = toolkit.createHyperlink(composite, "Restore defaults.", SWT.WRAP);
+		restoreDefaults.addHyperlinkListener(new HyperlinkAdapter() {
+			public void linkActivated(HyperlinkEvent e) {
+				updating = true;
+//				execute(new SetDeployDirectoryCommand(tomcatServer, PortalTomcatServer.DEFAULT_DEPLOYDIR));
+//				deployDir.setText(PortalTomcatServer.DEFAULT_DEPLOYDIR);
+				execute(new SetAutoDeployDirectoryCommand(tomcatServer, IPortalTomcatConstants.DEFAULT_AUTO_DEPLOYDIR));
+				autoDeployDir.setText(IPortalTomcatConstants.DEFAULT_AUTO_DEPLOYDIR);
+				execute(new SetAutoDeployIntervalCommand(tomcatServer, IPortalTomcatConstants.DEFAULT_AUTO_DEPLOY_INTERVAL));
+				autoDeployInterval.setText(IPortalTomcatConstants.DEFAULT_AUTO_DEPLOY_INTERVAL);
+				execute(new SetUserVMArgsCommand(tomcatServer, IPortalTomcatConstants.DEFAULT_USER_VMARGS));
+				userVMArgs.setText(IPortalTomcatConstants.DEFAULT_USER_VMARGS);
+				updateRestoreDefaultsLink();
+				updating = false;
+				validate();
+			}
+		});
+		data = new GridData(SWT.FILL, SWT.CENTER, true, false);
+		data.horizontalSpan = 3;
+		restoreDefaults.setLayoutData(data);
+
+		initialize();
+	}
+
+	protected Label createLabel(FormToolkit toolkit, Composite parent, String text) {
+		Label label = toolkit.createLabel(parent, text);
+		label.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
+		return label;
+	}
+
+	/**
+	 * @see ServerEditorSection#dispose()
+	 */
+	public void dispose() {
+		if (server != null) {
+			server.removePropertyChangeListener(listener);
+			if (server.getOriginal() != null)
+				server.getOriginal().removePublishListener(publishListener);
+		}
+	}
+
+	/**
+	 * @see ServerEditorSection#init(IEditorSite, IEditorInput)
+	 */
+	public void init(IEditorSite site, IEditorInput input) {
+		super.init(site, input);
+		
+		// Cache workspace and default deploy paths
+		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
+		workspacePath = root.getLocation();
+		defaultDeployPath = new Path(IPortalTomcatConstants.DEFAULT_DEPLOYDIR);
+
+		if (server != null) {
+			tomcatServer = (PortalTomcatServer) server.loadAdapter(PortalTomcatServer.class, null);
+			addChangeListeners();
+		}
+		initialize();
+	}
+
+	/**
+	 * Initialize the fields in this editor.
+	 */
+	protected void initialize() {
+		if (/* deployDir == null || */autoDeployInterval == null || userVMArgs == null || tomcatServer == null)
+			return;
+		updating = true;
+
+		IRuntime runtime = server.getRuntime();
+		// If not Tomcat 3.2, update description to mention catalina.base
+		if (runtime != null && runtime.getRuntimeType().getId().indexOf("32") < 0)
+//			section.setDescription(Messages.serverEditorLocationsDescription2);
+			section.setDescription("Configure Liferay portal options.");
+		if (runtime != null)
+			installDirPath = runtime.getLocation();
+
+		// determine if editing of locations is allowed
+		allowRestrictedEditing = false;
+		IPath basePath = tomcatServer.getRuntimeBaseDirectory();
+		if (!readOnly) {
+			// If server has not been published, or server is published with no modules, allow editing
+			// TODO Find better way to determine if server hasn't been published
+			if ((basePath != null && !basePath.append("conf").toFile().exists())
+					|| (server.getOriginal().getServerPublishState() == IServer.PUBLISH_STATE_NONE
+							&& server.getOriginal().getModules().length == 0)) {
+				allowRestrictedEditing = true;
+			}
+		}
+		
+		// Update server related fields
+		updateServerDirButtons();
+//		updateServerDirFields();
+
+//		serverDirMetadata.setEnabled(allowRestrictedEditing);
+//		serverDirInstall.setEnabled(allowRestrictedEditing);
+//		serverDirCustom.setEnabled(allowRestrictedEditing);
+
+		// Update deployment related fields
+		updateRestoreDefaultsLink();
+		
+//		deployDir.setText(tomcatServer.getDeployDirectory());
+		autoDeployDir.setText(tomcatServer.getAutoDeployDirectory());
+		autoDeployInterval.setText(tomcatServer.getAutoDeployInterval());
+		userVMArgs.setText(tomcatServer.getUserVMArgs());
+
+		restoreDefaults.setEnabled(allowRestrictedEditing);
+//		deployDir.setEnabled(allowRestrictedEditing);
+//		deployDirBrowse.setEnabled(allowRestrictedEditing);
+		autoDeployDir.setEnabled(allowRestrictedEditing);
+		autoDeployDirBrowse.setEnabled(allowRestrictedEditing);
+		autoDeployInterval.setEnabled(allowRestrictedEditing);
+		userVMArgs.setEnabled(allowRestrictedEditing);
+
+		updating = false;
+		validate();
+	}
+	
+	/*
+	protected String getServerDir() {
+		String dir = null;
+		if (serverDir != null) {
+			dir = serverDir.getText().trim();
+			IPath path = new Path(dir);
+			// Adjust if the temp dir is known and has been entered
+			if (tempDirPath != null && tempDirPath.equals(path))
+				dir = null;
+			// If under the workspace, make relative
+			else if (workspacePath.isPrefixOf(path)) {
+				int cnt = path.matchingFirstSegments(workspacePath);
+				path = path.removeFirstSegments(cnt).setDevice(null);
+				dir = path.toOSString();
+			}
+		}
+		return dir;
+	}
+	*/
+	
+	protected void updateServerDirButtons() {
+		if (tomcatServer.getInstanceDirectory() == null) {
+//			IPath path = tomcatServer.getRuntimeBaseDirectory();
+//			if (path != null && path.equals(installDirPath)) {
+//				serverDirInstall.setSelection(true);
+//				serverDirMetadata.setSelection(false);
+//				serverDirCustom.setSelection(false);
+//			} else {
+//				serverDirMetadata.setSelection(true);
+//				serverDirInstall.setSelection(false);
+//				serverDirCustom.setSelection(false);
+//			}
+		} else {
+//			serverDirCustom.setSelection(true);
+//			serverDirMetadata.setSelection(false);
+//			serverDirInstall.setSelection(false);
+		}
+	}
+	
+	protected void updateServerDirFields() {
+//		updateServerDir();
+//		boolean customServerDir = true;//serverDirCustom.getSelection();
+//		serverDir.setEnabled(allowRestrictedEditing && customServerDir);
+//		serverDirBrowse.setEnabled(allowRestrictedEditing && customServerDir);
+	}
+	
+	/*
+	protected void updateServerDir() {
+		IPath path = tomcatServer.getRuntimeBaseDirectory();
+		if (path == null)
+			serverDir.setText("");
+		else if (workspacePath.isPrefixOf(path)) {
+			int cnt = path.matchingFirstSegments(workspacePath);
+			path = path.removeFirstSegments(cnt).setDevice(null);
+			serverDir.setText(path.toOSString());
+			// cache the relative temp dir path if that is what we have
+			if (tempDirPath == null) {
+				if (tomcatServer.isTestEnvironment() && tomcatServer.getInstanceDirectory() == null)
+					tempDirPath = path;
+			}
+		} else
+			serverDir.setText(path.toOSString());
+	}
+	*/
+	
+	protected void updateRestoreDefaultsLink() {
+//		boolean newState = defaultDeployPath.equals(new Path(tomcatServer.getDeployDirectory()));
+//		if (newState != defaultDeployDirIsSet) {
+//			setDefaultDeployDir.setText(
+//					newState ? Messages.serverEditorSetDefaultDeployDirLink2
+//							: Messages.serverEditorSetDefaultDeployDirLink);
+//			defaultDeployDirIsSet = newState;
+//		}
+	}
+	
+	/**
+	 * @see ServerEditorSection#getSaveStatus()
+	 */
+	public IStatus[] getSaveStatus() {
+		if (tomcatServer != null) {
+			// Check the instance directory
+			String dir = tomcatServer.getInstanceDirectory();
+			if (dir != null) {
+				IPath path = new Path(dir);
+				// Must not be the same as the workspace location
+				if (dir.length() == 0 || workspacePath.equals(path)) {
+					return new IStatus [] {
+							new Status(IStatus.ERROR, PortalServerUIPlugin.PLUGIN_ID, Messages.errorServerDirIsRoot)};
+				}
+				// User specified value may not be under the ".metadata" folder of the workspace 
+				else if (workspacePath.isPrefixOf(path)
+						|| (!path.isAbsolute() && METADATADIR.equals(path.segment(0)))) {
+					int cnt = path.matchingFirstSegments(workspacePath);
+					if (METADATADIR.equals(path.segment(cnt))) {
+						return new IStatus [] {
+								new Status(IStatus.ERROR, PortalServerUIPlugin.PLUGIN_ID, NLS.bind(Messages.errorServerDirUnderRoot, METADATADIR))};
+					}
+				}
+				else if (path.equals(installDirPath))
+					return new IStatus [] {
+						new Status(IStatus.ERROR, PortalServerUIPlugin.PLUGIN_ID,
+								NLS.bind(Messages.errorServerDirCustomNotInstall,
+										NLS.bind(Messages.serverEditorServerDirInstall, "").trim()))};
+			}
+			else {
+				IPath path = tomcatServer.getRuntimeBaseDirectory();
+				// If non-custom instance dir is not the install and metadata isn't the selection, return error
+				if (!path.equals(installDirPath) /* && !serverDirMetadata.getSelection()*/) {
+					return new IStatus [] {
+							new Status(IStatus.ERROR, PortalServerUIPlugin.PLUGIN_ID, "Changing runtime base directories not supported.")};
+				}
+			}
+
+			// Check the deployment directory
+			dir = tomcatServer.getDeployDirectory();
+			// Deploy directory must be set
+			if (dir == null || dir.length() == 0) {
+				return new IStatus [] {
+						new Status(IStatus.ERROR, PortalServerUIPlugin.PLUGIN_ID, Messages.errorDeployDirNotSpecified)};
+			}
+		}
+		// use default implementation to return success
+		return super.getSaveStatus();
+	}
+	
+	protected void validate() {
+		if (tomcatServer != null) {
+			// Validate instance directory
+			String dir = tomcatServer.getInstanceDirectory();
+			if (dir != null) {
+				IPath path = new Path(dir);
+				// Must not be the same as the workspace location
+				if (dir.length() == 0 || workspacePath.equals(path)) {
+					setErrorMessage(Messages.errorServerDirIsRoot);
+					return;
+				}
+				// User specified value may not be under the ".metadata" folder of the workspace 
+				else if (workspacePath.isPrefixOf(path)
+						|| (!path.isAbsolute() && METADATADIR.equals(path.segment(0)))) {
+					int cnt = path.matchingFirstSegments(workspacePath);
+					if (METADATADIR.equals(path.segment(cnt))) {
+						setErrorMessage(NLS.bind(Messages.errorServerDirUnderRoot, METADATADIR));
+						return;
+					}
+				}
+				else if (path.equals(installDirPath)) {
+					setErrorMessage(NLS.bind(Messages.errorServerDirCustomNotInstall,
+							NLS.bind(Messages.serverEditorServerDirInstall, "").trim()));
+					return;
+				}
+			}
+			else {
+				IPath path = tomcatServer.getRuntimeBaseDirectory();
+				// If non-custom instance dir is not the install and metadata isn't the selection, return error
+				if (path != null && !path.equals(installDirPath) /*&& !serverDirMetadata.getSelection()*/) {
+					setErrorMessage(NLS.bind(Messages.errorServerDirCustomNotMetadata, 
+							NLS.bind(Messages.serverEditorServerDirMetadata, "").trim()));
+				}
+			}
+
+			// Check the deployment directory
+			dir = tomcatServer.getDeployDirectory();
+			// Deploy directory must be set
+			if (dir == null || dir.length() == 0) {
+				setErrorMessage(Messages.errorDeployDirNotSpecified);
+				return;
+			}
+		}
+		// All is okay, clear any previous error
+		setErrorMessage(null);
+	}
+}
\ No newline at end of file
#P com.liferay.ide.eclipse.server.tomcat.core
Index: src/com/liferay/ide/eclipse/server/tomcat/core/IPortalTomcatConstants.java
===================================================================
--- src/com/liferay/ide/eclipse/server/tomcat/core/IPortalTomcatConstants.java	(revision 54080)
+++ src/com/liferay/ide/eclipse/server/tomcat/core/IPortalTomcatConstants.java	(working copy)
@@ -23,21 +23,26 @@
  */
 public interface IPortalTomcatConstants {
 
-	public static final IEclipsePreferences defaultPrefs = new DefaultScope().getNode(PortalTomcatPlugin.PLUGIN_ID);
+	public static final String DEFAULT_AUTO_DEPLOY_INTERVAL = "500";
 
-	final String DEFAULT_AUTO_DEPLOY_INTERVAL = "500";
+	public static final String DEFAULT_AUTO_DEPLOYDIR = "../deploy";
 
-	final String DEFAULT_AUTO_DEPLOYDIR = "../deploy";
+	public static final String DEFAULT_DEPLOYDIR = "webapps";
 
-	final String DEFAULT_DEPLOYDIR = "webapps";
+	public static final String DEFAULT_USER_VMARGS =
+		"-Xmx1024m\n-XX:MaxPermSize=256m\n-Dfile.encoding=UTF8\n-Duser.timezone=GMT\n";
 
-	final String[] LIB_EXCLUDES = defaultPrefs.get("tomcat.lib.excludes", "").split(",");
+	public static final IEclipsePreferences defaultPrefs = new DefaultScope().getNode(PortalTomcatPlugin.PLUGIN_ID);
 
+	public static final String[] LIB_EXCLUDES = defaultPrefs.get("tomcat.lib.excludes", "").split(",");
+
 	/**
 	 * Property which specifies the directory where liferay scans for
 	 * autodeployment
 	 */
-	final String PROPERTY_AUTO_DEPLOY_DIR = "autoDeployDir";
+	public static final String PROPERTY_AUTO_DEPLOY_DIR = "autoDeployDir";
 
-	final String PROPERTY_AUTO_DEPLOY_INTERVAL = "autoDeployInterval";
+	public static final String PROPERTY_AUTO_DEPLOY_INTERVAL = "autoDeployInterval";
+
+	public static final String PROPERTY_USER_VMARGS = "userVMArgs";
 }
Index: src/com/liferay/ide/eclipse/server/tomcat/core/PortalTomcat60Handler.java
===================================================================
--- src/com/liferay/ide/eclipse/server/tomcat/core/PortalTomcat60Handler.java	(revision 55764)
+++ src/com/liferay/ide/eclipse/server/tomcat/core/PortalTomcat60Handler.java	(working copy)
@@ -15,6 +15,7 @@
 
 package com.liferay.ide.eclipse.server.tomcat.core;
 
+import com.liferay.ide.eclipse.core.util.CoreUtil;
 import com.liferay.ide.eclipse.project.core.util.ProjectUtil;
 
 import java.io.File;
@@ -57,7 +58,7 @@
 				}
 			}
 		}
-		
+
 		return super.canAddModule(module);
 	}
 
@@ -65,10 +66,33 @@
 	public String[] getRuntimeVMArguments(IPath installPath, IPath configPath, IPath deployPath, boolean isTestEnv) {
 		List<String> runtimeVMArgs = new ArrayList<String>();
 
-		runtimeVMArgs.add("-Xmx1024m");		
-		runtimeVMArgs.add("-XX:MaxPermSize=256m");
-		runtimeVMArgs.add("-Dfile.encoding=UTF8");
-		runtimeVMArgs.add("-Duser.timezone=GMT");
+		// runtimeVMArgs.add("-Xmx1024m");
+		// runtimeVMArgs.add("-XX:MaxPermSize=256m");
+		// runtimeVMArgs.add("-Dfile.encoding=UTF8");
+
+		if (currentServer != null) {
+			PortalTomcatServer server =
+				(PortalTomcatServer) this.currentServer.loadAdapter(PortalTomcatServer.class, null);
+			if (server != null) {
+				// runtimeVMArgs.add("-Duser.timezone=" + server.getUserTimezone());
+				String vmargs = server.getUserVMArgs();
+
+				if (CoreUtil.isNullOrEmpty(vmargs)) {
+					vmargs = IPortalTomcatConstants.DEFAULT_USER_VMARGS;
+				}
+
+				String[] args = vmargs.replaceAll("\r", "").split("\n");
+
+				for (String arg : args) {
+					runtimeVMArgs.add(arg);
+				}
+			}
+		}
+		else {
+			// runtimeVMArgs.add("-Duser.timezone=GMT");
+			runtimeVMArgs.add(IPortalTomcatConstants.DEFAULT_USER_VMARGS);
+		}
+
 		runtimeVMArgs.add("-Dorg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES=false");
 		runtimeVMArgs.add("-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager");
 		runtimeVMArgs.add("-Djava.security.auth.login.config=\"" + configPath.toOSString() + "/conf/jaas.config\"");
@@ -78,7 +102,7 @@
 
 		try {
 			ensurePortalIDEPropertiesExists(installPath, configPath);
-			
+
 			runtimeVMArgs.add("-Dexternal-properties=portal-ide.properties");
 		}
 		catch (Exception e) {
@@ -86,7 +110,7 @@
 		}
 
 		Collections.addAll(runtimeVMArgs, super.getRuntimeVMArguments(installPath, configPath, deployPath, isTestEnv));
-		
+
 		return runtimeVMArgs.toArray(new String[runtimeVMArgs.size()]);
 	}
 
@@ -96,15 +120,15 @@
 
 	protected void ensurePortalIDEPropertiesExists(IPath installPath, IPath configPath)
 		throws FileNotFoundException, IOException {
-		
+
 		IPath idePropertiesPath = installPath.append("../portal-ide.properties");
-		
+
 		String hostName = "localhost";
-		
+
 		try {
 			ServerInstance server =
 				TomcatVersionHelper.getCatalinaServerInstance(configPath.append("conf/server.xml"), null, null);
-			
+
 			hostName = server.getHost().getName();
 		}
 		catch (SAXException e) {
@@ -128,31 +152,31 @@
 		// return;
 		// }
 		// }
-		
+
 		Properties props = new Properties();
-		
+
 		props.put("include-and-override", "portal-developer.properties");
-		
+
 		props.put("auto.deploy.tomcat.conf.dir", configPath.append("conf/Catalina/" + hostName).toOSString());
 
 		if (this.currentServer != null) {
 			PortalTomcatServer server =
 				(PortalTomcatServer) this.currentServer.loadAdapter(PortalTomcatServer.class, null);
-			
+
 			if (server != null) {
 				IPath runtimLocation = server.getTomcatRuntime().getRuntime().getLocation();
-				
+
 				String autoDeployDir = server.getAutoDeployDirectory();
-				
+
 				if (!IPortalTomcatConstants.DEFAULT_AUTO_DEPLOYDIR.equals(autoDeployDir)) {
 					IPath autoDeployDirPath = new Path(autoDeployDir);
-					
+
 					if (autoDeployDirPath.isAbsolute() && autoDeployDirPath.toFile().exists()) {
 						props.put("auto.deploy.deploy.dir", server.getAutoDeployDirectory());
 					}
 					else {
 						File autoDeployDirFile = new File(runtimLocation.toFile(), autoDeployDir);
-						
+
 						if (autoDeployDirFile.exists()) {
 							props.put("auto.deploy.deploy.dir", autoDeployDirFile.getPath());
 						}
@@ -162,7 +186,7 @@
 				props.put("auto.deploy.interval", server.getAutoDeployInterval());
 			}
 		}
-		
+
 		props.store(new FileOutputStream(idePropertiesPath.toFile()), null);
 	}
 
Index: src/com/liferay/ide/eclipse/server/tomcat/core/PortalTomcatServer.java
===================================================================
--- src/com/liferay/ide/eclipse/server/tomcat/core/PortalTomcatServer.java	(revision 58599)
+++ src/com/liferay/ide/eclipse/server/tomcat/core/PortalTomcatServer.java	(working copy)
@@ -160,4 +160,12 @@
 
 		return null;
 	}
+
+	public String getUserVMArgs() {
+		return getAttribute(IPortalTomcatConstants.PROPERTY_USER_VMARGS, IPortalTomcatConstants.DEFAULT_USER_VMARGS);
+	}
+
+	public void setUserVMArgs(String vmargs) {
+		setAttribute(IPortalTomcatConstants.PROPERTY_USER_VMARGS, vmargs);
+	}
 }
